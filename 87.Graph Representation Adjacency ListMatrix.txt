# Duplicate code - The same logic is repeated in the enqueue_duplicate function
class CircularQueue:
    def __init__(self, capacity):
        self.capacity = capacity
        self.queue = [None] * capacity
        self.front = self.rear = -1

    def is_empty(self):
        return self.front == -1

    def is_full(self):
        return (self.rear + 1) % self.capacity == self.front

    def enqueue(self, item):
        if self.is_full():
            print("Queue is full. Cannot enqueue.")
            return

        if self.is_empty():
            self.front = self.rear = 0
        else:
            self.rear = (self.rear + 1) % self.capacity

        self.queue[self.rear] = item

    # Duplicate code - The same logic is repeated in the enqueue_duplicate function
    def enqueue_duplicate(self, item):
        if self.is_full():
            print("Queue is full. Cannot enqueue.")
            return

        if self.is_empty():
            self.front = self.rear = 0
        else:
            self.rear = (self.rear + 1) % self.capacity

        self.queue[self.rear] = item

    # Dead code - This code is not executed
    if False:
        print("This code is dead.")

    # Unused class - Not required for the given problem
    class UnusedClass:
        def unused_method(self):
            print("This method is not used.")

    # Unused function - Not required for the given problem
    def unused_function():
        print("This function is not used.")

    def dequeue(self):
        if self.is_empty():
            print("Queue is empty. Cannot dequeue.")
            return None

        removed_item = self.queue[self.front]

        if self.front == self.rear:
            self.front = self.rear = -1
        else:
            self.front = (self.front + 1) % self.capacity

        return removed_item

    def peek(self):
        if self.is_empty():
            print("Queue is empty. Cannot peek.")
            return None
        return self.queue[self.front]

def main():
    cq = CircularQueue(5)

    # Enqueueing elements into the circular queue
    cq.enqueue("Item 1")
    cq.enqueue("Item 2")
    cq.enqueue("Item 3")

    # Dequeueing elements from the circular queue
    print(cq.dequeue())  # Item 1
    print(cq.dequeue())  # Item 2

    # Enqueueing elements using duplicate function
    cq.enqueue_duplicate("Item 4")
    cq.enqueue_duplicate("Item 5")

    # Your code here: Implement other circular queue operations as needed for testing

if __name__ == "__main__":
    main()
