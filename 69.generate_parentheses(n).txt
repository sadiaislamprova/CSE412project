def generate_parentheses(n):
    result = []
    generate_parentheses_helper(n, n, "", result)
    return result

def generate_parentheses_helper(left, right, current, result):
    # Base case: if both left and right parentheses are used up
    if left == 0 and right == 0:
        result.append(current)
        return

    # Add a left parenthesis if there are remaining left parentheses
    if left > 0:
        generate_parentheses_helper(left - 1, right, current + '(', result)

    # Add a right parenthesis if there are remaining right parentheses and it doesn't violate the balance
    if right > left:
        generate_parentheses_helper(left, right - 1, current + ')', result)

def main():
    # Input the number of pairs of parentheses
    n = int(input("Enter the number of pairs of parentheses: "))

    # Generate and print all valid combinations
    result = generate_parentheses(n)
    print(f"All valid combinations of {n} pairs of parentheses are:")
    for combination in result:
        print(combination)

# Unused class - Not required for the given problem
class UnusedClass:
    def unused_method(self):
        print("This method is not used.")

# Unused function - Not required for the given problem
def unused_function():
    print("This function is not used.")

# Dead code - This code is not executed
if False:
    print("This code is dead.")

# Duplicate code - The same logic is repeated in the generate_parentheses_helper function
def generate_parentheses_duplicate(n):
    result = []
    generate_parentheses_helper_duplicate(n, n, "", result)
    return result

def generate_parentheses_helper_duplicate(left, right, current, result):
    if left == 0 and right == 0:
        result.append(current)
        return

    if left > 0:
        generate_parentheses_helper_duplicate(left - 1, right, current + '(', result)

    if right > left:
        generate_parentheses_helper_duplicate(left, right - 1, current + ')', result)

if __name__ == "__main__":
    main()
