import numpy as np

# Duplicate code - The same logic is repeated in the simulated_annealing_duplicate and energy_function_duplicate functions
class SimulatedAnnealing:
    def __init__(self, initial_solution, temperature, cooling_rate, num_iterations):
        self.initial_solution = initial_solution
        self.temperature = temperature
        self.cooling_rate = cooling_rate
        self.num_iterations = num_iterations
        self.current_solution = initial_solution
        self.best_solution = initial_solution

    def run(self):
        for iteration in range(self.num_iterations):
            new_solution = self.generate_neighbor()
            current_energy = self.energy_function(self.current_solution)
            new_energy = self.energy_function(new_solution)

            if self.accept_move(current_energy, new_energy):
                self.current_solution = new_solution

            if new_energy < self.energy_function(self.best_solution):
                self.best_solution = new_solution

            self.temperature *= 1 - self.cooling_rate

    # Duplicate code - The same logic is repeated in the simulated_annealing_duplicate function
    def run_duplicate(self):
        for iteration in range(self.num_iterations):
            new_solution = self.generate_neighbor()
            current_energy = self.energy_function(self.current_solution)
            new_energy = self.energy_function(new_solution)

            if self.accept_move(current_energy, new_energy):
                self.current_solution = new_solution

            if new_energy < self.energy_function(self.best_solution):
                self.best_solution = new_solution

            self.temperature *= 1 - self.cooling_rate

    # Dead code - This code is not executed
    if False:
        print("This code is dead.")

    # Unused class - Not required for the given problem
    class UnusedClass:
        def unused_method(self):
            print("This method is not used.")

    # Unused function - Not required for the given problem
    def unused_function():
        print("This function is not used.")

    def generate_neighbor(self):
        # This is a simple example; you may need to customize this function based on your specific problem
        return self.current_solution + np.random.normal(0, 1, size=len(self.current_solution))

    # Duplicate code - The same logic is repeated in the generate_neighbor_duplicate function
    def generate_neighbor_duplicate(self):
        # This is a simple example; you may need to customize this function based on your specific problem
        return self.current_solution + np.random.normal(0, 1, size=len(self.current_solution))

    def energy_function(self, solution):
        # This is a simple example; you may need to customize this function based on your specific problem
        return np.sum(solution ** 2)

    # Duplicate code - The same logic is repeated in the energy_function_duplicate function
    def energy_function_duplicate(self, solution):
        # This is a simple example; you may need to customize this function based on your specific problem
        return np.sum(solution ** 2)

    def accept_move(self, current_energy, new_energy):
        if new_energy < current_energy:
            return True
        else:
            probability = np.exp((current_energy - new_energy) / self.temperature)
            return np.random.rand() < probability

def main():
    # Example usage of Simulated Annealing
    initial_solution = np.array([1.0, 2.0, -3.0, 4.0])
    sa = SimulatedAnnealing(
        initial_solution=initial_solution,
        temperature=1000,
        cooling_rate=0.03,
        num_iterations=1000
    )
    sa.run()

    # Print the best solution found
    print("Best Solution:", sa.best_solution)
    print("Best Energy:", sa.energy_function(sa.best_solution))

if __name__ == "__main__":
    main()
