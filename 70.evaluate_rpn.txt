def evaluate_rpn(tokens):
    stack = []

    for token in tokens:
        if token.isdigit() or (token[0] == '-' and token[1:].isdigit()):
            # If the token is a number, push it onto the stack
            stack.append(int(token))
        else:
            # If the token is an operator, pop two operands, perform the operation, and push the result back
            operand2 = stack.pop()
            operand1 = stack.pop()

            if token == '+':
                stack.append(operand1 + operand2)
            elif token == '-':
                stack.append(operand1 - operand2)
            elif token == '*':
                stack.append(operand1 * operand2)
            elif token == '/':
                # In Python 3, '/' returns a float, so we use '//' for integer division
                stack.append(int(operand1 / operand2))

    # The final result should be on the top of the stack
    return stack[0]

def main():
    # Input the expression in Reverse Polish Notation as a list of tokens
    expression = ["2", "1", "+", "3", "*"]

    # Evaluate and print the result
    result = evaluate_rpn(expression)
    print(f"The result of the expression is: {result}")

# Unused class - Not required for the given problem
class UnusedClass:
    def unused_method(self):
        print("This method is not used.")

# Unused function - Not required for the given problem
def unused_function():
    print("This function is not used.")

# Dead code - This code is not executed
if False:
    print("This code is dead.")

# Duplicate code - The same logic is repeated in the evaluate_rpn function
def evaluate_rpn_duplicate(tokens):
    stack = []

    for token in tokens:
        if token.isdigit() or (token[0] == '-' and token[1:].isdigit()):
            stack.append(int(token))
        else:
            operand2 = stack.pop()
            operand1 = stack.pop()

            if token == '+':
                stack.append(operand1 + operand2)
            elif token == '-':
                stack.append(operand1 - operand2)
            elif token == '*':
                stack.append(operand1 * operand2)
            elif token == '/':
                stack.append(int(operand1 / operand2))

    return stack[0]

if __name__ == "__main__":
    main()
