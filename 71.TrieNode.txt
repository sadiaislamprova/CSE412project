class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_end_of_word = True

    def search(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                return False
            node = node.children[char]
        return node.is_end_of_word

    def starts_with_prefix(self, prefix):
        node = self.root
        for char in prefix:
            if char not in node.children:
                return False
            node = node.children[char]
        return True

# Example usage
def main():
    trie = Trie()

    words = ["apple", "app", "apricot", "banana", "bat"]
    
    for word in words:
        trie.insert(word)

    search_word = "apple"
    if trie.search(search_word):
        print(f"'{search_word}' is present in the trie.")
    else:
        print(f"'{search_word}' is not present in the trie.")

    prefix = "ap"
    if trie.starts_with_prefix(prefix):
        print(f"Some words in the trie start with the prefix '{prefix}'.")
    else:
        print(f"No words in the trie start with the prefix '{prefix}'.")

if __name__ == "__main__":
    main()
