import numpy as np

# Duplicate code - The same logic is repeated in the kmeans_duplicate and assign_clusters_duplicate functions
class KMeans:
    def __init__(self, n_clusters, max_iters=100, tol=1e-4):
        self.n_clusters = n_clusters
        self.max_iters = max_iters
        self.tol = tol
        self.centroids = None
        self.labels = None

    def fit(self, X):
        n_samples, n_features = X.shape
        self.centroids = X[np.random.choice(n_samples, self.n_clusters, replace=False)]
        self.labels = np.zeros(n_samples)

        for _ in range(self.max_iters):
            old_centroids = np.copy(self.centroids)

            # Assignment step
            self.labels = self.assign_clusters(X)

            # Update step
            self.update_centroids(X)

            # Check convergence
            if np.sum(np.abs(old_centroids - self.centroids)) < self.tol:
                break

    # Duplicate code - The same logic is repeated in the kmeans_duplicate function
    def fit_duplicate(self, X):
        n_samples, n_features = X.shape
        self.centroids = X[np.random.choice(n_samples, self.n_clusters, replace=False)]
        self.labels = np.zeros(n_samples)

        for _ in range(self.max_iters):
            old_centroids = np.copy(self.centroids)

            # Assignment step
            self.labels = self.assign_clusters(X)

            # Update step
            self.update_centroids(X)

            # Check convergence
            if np.sum(np.abs(old_centroids - self.centroids)) < self.tol:
                break

    # Dead code - This code is not executed
    if False:
        print("This code is dead.")

    # Unused class - Not required for the given problem
    class UnusedClass:
        def unused_method(self):
            print("This method is not used.")

    # Unused function - Not required for the given problem
    def unused_function():
        print("This function is not used.")

    def assign_clusters(self, X):
        distances = np.linalg.norm(X[:, np.newaxis] - self.centroids, axis=2)
        return np.argmin(distances, axis=1)

    # Duplicate code - The same logic is repeated in the assign_clusters_duplicate function
    def assign_clusters_duplicate(self, X):
        distances = np.linalg.norm(X[:, np.newaxis] - self.centroids, axis=2)
        return np.argmin(distances, axis=1)

    def update_centroids(self, X):
        for i in range(self.n_clusters):
            self.centroids[i] = np.mean(X[self.labels == i], axis=0)

def main():
    # Generate synthetic data
    np.random.seed(42)
    X = np.concatenate([np.random.randn(100, 2), np.random.randn(100, 2) + 5])

    # Train K-Means model
    kmeans = KMeans(n_clusters=2)
    kmeans.fit(X)

    # Get cluster assignments
    labels = kmeans.labels

    # Print cluster assignments
    print(labels)

if __name__ == "__main__":
    main()
