class MergeSort:
    def __init__(self, unsorted_list):
        self.unsorted_list = unsorted_list

    def merge_sort(self):
        if len(self.unsorted_list) > 1:
            mid = len(self.unsorted_list) // 2
            left_half = self.unsorted_list[:mid]
            right_half = self.unsorted_list[mid:]

            # Recursive call to sort the left and right halves
            left_sorter = MergeSort(left_half)
            left_sorter.merge_sort()

            right_sorter = MergeSort(right_half)
            right_sorter.merge_sort()

            i = j = k = 0

            # Merge the sorted halves back into the original list
            while i < len(left_half) and j < len(right_half):
                if left_half[i] < right_half[j]:
                    self.unsorted_list[k] = left_half[i]
                    i += 1
                else:
                    self.unsorted_list[k] = right_half[j]
                    j += 1
                k += 1

            while i < len(left_half):
                self.unsorted_list[k] = left_half[i]
                i += 1
                k += 1

            while j < len(right_half):
                self.unsorted_list[k] = right_half[j]
                j += 1
                k += 1

# Example usage:
list_to_sort = [64, 25, 12, 22, 11]
merge_sorter = MergeSort(list_to_sort)

print("Original List:", list_to_sort)
merge_sorter.merge_sort()
print("List after Merge Sort:", list_to_sort)
