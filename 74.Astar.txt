import heapq

class GridNode:
    def __init__(self, row, col, cost=1):
        self.row = row
        self.col = col
        self.cost = cost
        self.heuristic = 0
        self.total_cost = 0
        self.parent = None

    def set_heuristic(self, goal):
        # Simple Manhattan distance heuristic
        self.heuristic = abs(self.row - goal.row) + abs(self.col - goal.col)

    def set_total_cost(self):
        self.total_cost = self.cost + self.heuristic

class Grid:
    def __init__(self, rows, cols):
        self.rows = rows
        self.cols = cols
        self.grid = [[0] * cols for _ in range(rows)]

    def set_obstacle(self, row, col):
        self.grid[row][col] = 1

def astar(grid, start, goal):
    open_set = []
    closed_set = set()

    heapq.heappush(open_set, (start.total_cost, start))

    while open_set:
        current_cost, current_node = heapq.heappop(open_set)

        if current_node == goal:
            path = []
            while current_node:
                path.append((current_node.row, current_node.col))
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(current_node)

        neighbors = get_neighbors(grid, current_node)
        for neighbor in neighbors:
            if neighbor in closed_set:
                continue

            neighbor.set_heuristic(goal)
            neighbor.set_total_cost()

            if (neighbor.total_cost, neighbor) not in open_set:
                neighbor.parent = current_node
                heapq.heappush(open_set, (neighbor.total_cost, neighbor))

    return None

def get_neighbors(grid, node):
    neighbors = []
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]

    for dr, dc in directions:
        new_row, new_col = node.row + dr, node.col + dc

        if 0 <= new_row < grid.rows and 0 <= new_col < grid.cols and grid.grid[new_row][new_col] == 0:
            neighbor = GridNode(new_row, new_col)
            neighbors.append(neighbor)

    return neighbors

# Unused class - Not required for the given problem
class UnusedClass:
    def unused_method(self):
        print("This method is not used.")

# Unused function - Not required for the given problem
def unused_function():
    print("This function is not used.")

# Dead code - This code is not executed
if False:
    print("This code is dead.")

# Duplicate code - The same logic is repeated in the set_heuristic method
def set_heuristic_duplicate(node, goal):
    node.heuristic = abs(node.row - goal.row) + abs(node.col - goal.col)

def main():
    # Create a 5x5 grid
    grid = Grid(5, 5)

    # Set some obstacles
    grid.set_obstacle(1, 1)
    grid.set_obstacle(2, 2)
    grid.set_obstacle(3, 3)

    # Define start and goal nodes
    start_node = GridNode(0, 0)
    goal_node = GridNode(4, 4)

    # Find the path using A* algorithm
    path = astar(grid, start_node, goal_node)

    if path:
        print(f"A* Pathfinding Result: {path}")
    else:
        print("No path found.")

if __name__ == "__main__":
    main()
