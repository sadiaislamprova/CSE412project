from collections import deque

# Duplicate code - The same logic is repeated in the is_bipartite_duplicate function
def is_bipartite(graph):
    color = {}
    visited = set()
    queue = deque()

    for node in graph:
        if node not in visited:
            queue.append(node)
            color[node] = 0

            while queue:
                current_node = queue.popleft()
                visited.add(current_node)

                for neighbor in graph[current_node]:
                    if neighbor not in visited:
                        queue.append(neighbor)
                        color[neighbor] = 1 - color[current_node]
                    elif color[neighbor] == color[current_node]:
                        return False

    return True

def is_bipartite_duplicate(graph):
    color = {}
    visited = set()
    queue = deque()

    for node in graph:
        if node not in visited:
            queue.append(node)
            color[node] = 0

            while queue:
                current_node = queue.popleft()
                visited.add(current_node)

                for neighbor in graph[current_node]:
                    if neighbor not in visited:
                        queue.append(neighbor)
                        color[neighbor] = 1 - color[current_node]
                    elif color[neighbor] == color[current_node]:
                        return False

    return True

# Dead code - This code is not executed
if False:
    print("This code is dead.")

# Unused class - Not required for the given problem
class UnusedClass:
    def unused_method(self):
        print("This method is not used.")

# Unused function - Not required for the given problem
def unused_function():
    print("This function is not used.")

def main():
    # Example of a bipartite graph
    bipartite_graph = {
        1: [2, 3],
        2: [1, 4],
        3: [1, 4],
        4: [2, 3]
    }

    result = is_bipartite(bipartite_graph)
    print(f"Is the graph bipartite? {result}")

    # Example of a non-bipartite graph
    non_bipartite_graph = {
        1: [2, 3],
        2: [1, 3],
        3: [1, 2]
    }

    result_duplicate = is_bipartite_duplicate(non_bipartite_graph)
    print(f"Is the duplicate graph bipartite? {result_duplicate}")

if __name__ == "__main__":
    main()
