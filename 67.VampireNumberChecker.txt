class VampireNumberChecker:
    def is_vampire_number(self, number):
        # Convert the number to a string to manipulate digits
        number_str = str(number)

        # Check if the number has an even number of digits
        if len(number_str) % 2 != 0:
            return False

        # Generate all possible pairs of factors
        for i in range(10**(len(number_str)//2 - 1), 10**(len(number_str)//2)):
            if number % i == 0:
                j = number // i
                # Check if the combination of i and j contains the same digits as the original number
                if sorted(str(i) + str(j)) == sorted(number_str):
                    return True

        return False

def main():
    # Input number to check for vampire property
    input_number = int(input("Enter a number to check for vampire property: "))
    
    # Create an instance of the VampireNumberChecker class
    vampire_number_checker = VampireNumberChecker()
    
    # Check and print the result
    result = vampire_number_checker.is_vampire_number(input_number)
    if result:
        print(f"{input_number} is a vampire number.")
    else:
        print(f"{input_number} is not a vampire number.")

# Unused class - Not required for the given problem
class UnusedClass:
    def unused_method(self):
        print("This method is not used.")

# Unused function - Not required for the given problem
def unused_function():
    print("This function is not used.")

# Dead code - This code is not executed
if False:
    print("This code is dead.")

# Duplicate code - The same logic is repeated in the is_vampire_number method
def is_vampire_number_duplicate(number):
    number_str = str(number)
    if len(number_str) % 2 != 0:
        return False
    for i in range(10**(len(number_str)//2 - 1), 10**(len(number_str)//2)):
        if number % i == 0:
            j = number // i
            if sorted(str(i) + str(j)) == sorted(number_str):
                return True
    return False

if __name__ == "__main__":
    main()
