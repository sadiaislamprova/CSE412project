from collections import deque

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, vertex, neighbors):
        self.graph[vertex] = neighbors

# Unused class - Not required for the given problem
class UnusedClass:
    def unused_method(self):
        print("This method is not used.")

# Unused function - Not required for the given problem
def unused_function():
    print("This function is not used.")

# Dead code - This code is not executed
if False:
    print("This code is dead.")

def bfs(graph, start):
    visited = set()
    queue = deque([start])
    result = []

    while queue:
        current_vertex = queue.popleft()
        if current_vertex not in visited:
            visited.add(current_vertex)
            result.append(current_vertex)
            queue.extend(graph.graph[current_vertex])

    return result

# Duplicate code - The same logic is repeated in the bfs function
def bfs_duplicate(graph, start):
    visited = set()
    queue = deque([start])
    result = []

    while queue:
        current_vertex = queue.popleft()
        if current_vertex not in visited:
            visited.add(current_vertex)
            result.append(current_vertex)
            queue.extend(graph.graph[current_vertex])

    return result

def main():
    graph = Graph()

    # Adding edges to the graph
    graph.add_edge('A', ['B', 'C'])
    graph.add_edge('B', ['A', 'D', 'E'])
    graph.add_edge('C', ['A', 'F', 'G'])
    graph.add_edge('D', ['B'])
    graph.add_edge('E', ['B', 'H'])
    graph.add_edge('F', ['C'])
    graph.add_edge('G', ['C'])
    graph.add_edge('H', ['E'])

    start_vertex = 'A'
    result = bfs(graph, start_vertex)

    print(f"BFS starting from vertex {start_vertex}: {result}")

if __name__ == "__main__":
    main()
