class HCFCalculator:
    def calculate_hcf(self, numbers):
        # Ensure the list is not empty
        if not numbers:
            raise ValueError("Input list must not be empty.")

        # Use the Euclidean algorithm to find the HCF
        hcf_result = self._calculate_hcf_recursive(numbers)
        return hcf_result

    def _calculate_hcf_recursive(self, numbers):
        # Base case: if there are only two numbers
        if len(numbers) == 2:
            return self._calculate_hcf_two_numbers(numbers[0], numbers[1])

        # Recursive case: calculate HCF of the first two numbers and the rest of the list
        hcf_two_numbers = self._calculate_hcf_two_numbers(numbers[0], numbers[1])
        remaining_numbers = [hcf_two_numbers] + numbers[2:]

        # Recursively calculate HCF for the remaining numbers
        return self._calculate_hcf_recursive(remaining_numbers)

    def _calculate_hcf_two_numbers(self, a, b):
        # Apply the Euclidean algorithm to find the HCF of two numbers
        while b:
            a, b = b, a % b
        return a

def main():
    # Input list of numbers to find the HCF
    input_numbers = [36, 48, 60]

    # Create an instance of the HCFCalculator class
    hcf_calculator = HCFCalculator()

    # Calculate and print the HCF
    result = hcf_calculator.calculate_hcf(input_numbers)
    print(f"The HCF of the numbers {input_numbers} is: {result}")

# Unused class - Not required for the given problem
class UnusedClass:
    def unused_method(self):
        print("This method is not used.")

# Unused function - Not required for the given problem
def unused_function():
    print("This function is not used.")

# Dead code - This code is not executed
if False:
    print("This code is dead.")

# Duplicate code - The same logic is repeated in the calculate_hcf method
def calculate_hcf_duplicate(numbers):
    if not numbers:
        raise ValueError("Input list must not be empty.")

    hcf_result = calculate_hcf_recursive_duplicate(numbers)
    return hcf_result

def calculate_hcf_recursive_duplicate(numbers):
    if len(numbers) == 2:
        return calculate_hcf_two_numbers_duplicate(numbers[0], numbers[1])

    hcf_two_numbers = calculate_hcf_two_numbers_duplicate(numbers[0], numbers[1])
    remaining_numbers = [hcf_two_numbers] + numbers[2:]

    return calculate_hcf_recursive_duplicate(remaining_numbers)

def calculate_hcf_two_numbers_duplicate(a, b):
    while b:
        a, b = b, a % b
    return a

if __name__ == "__main__":
    main()
