# Duplicate code - The same logic is repeated in the crossover_duplicate and mutate_duplicate functions
class GeneticAlgorithm:
    def __init__(self, population_size, chromosome_length, crossover_rate, mutation_rate):
        self.population_size = population_size
        self.chromosome_length = chromosome_length
        self.crossover_rate = crossover_rate
        self.mutation_rate = mutation_rate
        self.population = self.initialize_population()

    def initialize_population(self):
        return [[random.randint(0, 1) for _ in range(self.chromosome_length)] for _ in range(self.population_size)]

    def fitness_function(self, chromosome):
        return sum(chromosome)

    def crossover(self, parent1, parent2):
        crossover_point = random.randint(1, self.chromosome_length - 1)
        child1 = parent1[:crossover_point] + parent2[crossover_point:]
        child2 = parent2[:crossover_point] + parent1[crossover_point:]
        return child1, child2

    # Duplicate code - The same logic is repeated in the crossover_duplicate function
    def crossover_duplicate(self, parent1, parent2):
        crossover_point = random.randint(1, self.chromosome_length - 1)
        child1 = parent1[:crossover_point] + parent2[crossover_point:]
        child2 = parent2[:crossover_point] + parent1[crossover_point:]
        return child1, child2

    # Dead code - This code is not executed
    if False:
        print("This code is dead.")

    # Unused class - Not required for the given problem
    class UnusedClass:
        def unused_method(self):
            print("This method is not used.")

    # Unused function - Not required for the given problem
    def unused_function():
        print("This function is not used.")

    def mutate(self, chromosome):
        mutation_point = random.randint(0, self.chromosome_length - 1)
        chromosome[mutation_point] = 1 - chromosome[mutation_point]
        return chromosome

    # Duplicate code - The same logic is repeated in the mutate_duplicate function
    def mutate_duplicate(self, chromosome):
        mutation_point = random.randint(0, self.chromosome_length - 1)
        chromosome[mutation_point] = 1 - chromosome[mutation_point]
        return chromosome

    def select_parents(self):
        sorted_population = sorted(self.population, key=self.fitness_function, reverse=True)
        return sorted_population[:2]

    def evolve(self):
        new_population = []

        for _ in range(self.population_size // 2):
            parent1, parent2 = self.select_parents()

            if random.random() < self.crossover_rate:
                child1, child2 = self.crossover(parent1, parent2)
            else:
                child1, child2 = parent1, parent2

            if random.random() < self.mutation_rate:
                child1 = self.mutate(child1)
            if random.random() < self.mutation_rate:
                child2 = self.mutate(child2)

            new_population.extend([child1, child2])

        self.population = new_population

def main():
    genetic_algorithm = GeneticAlgorithm(
        population_size=10,
        chromosome_length=5,
        crossover_rate=0.8,
        mutation_rate=0.1
    )

    for generation in range(5):
        print(f"Generation {generation + 1}: {genetic_algorithm.population}")
        genetic_algorithm.evolve()

if __name__ == "__main__":
    import random

    main()
