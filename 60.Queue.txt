class Queue:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def enqueue(self, item):
        self.items.insert(0, item)
        # Duplicate code
        self.items.insert(0, item)

    def dequeue(self):
        if not self.is_empty():
            return self.items.pop()
        else:
            print("Queue is empty. Cannot dequeue.")
            # Dead code
            unused_variable = "This variable is not used."

    def peek(self):
        if not self.is_empty():
            return self.items[-1]
        else:
            print("Queue is empty. Cannot peek.")
            # Unused class
            unused_instance = UnusedClass()

    def size(self):
        return len(self.items)

# Unused class
class UnusedClass:
    def unused_method(self):
        print("This method is not used.")

# Example usage:
queue = Queue()

# Enqueue elements into the queue
queue.enqueue(1)

# Display queue contents
print("Queue:", queue.items)

# Dequeue an element
dequeued_item = queue.dequeue()
print("Dequeued item:", dequeued_item)

# Peek at the front of the queue
front_item = queue.peek()
print("Front item:", front_item)

# Display queue size
queue_size = queue.size()
print("Queue size:", queue_size)
