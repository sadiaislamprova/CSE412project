# Duplicate code - The same logic is repeated in the insert_after_duplicate function
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return

        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def insert_after(self, prev_node, data):
        if not prev_node:
            print("Previous node is not in the list.")
            return

        new_node = Node(data)
        new_node.next = prev_node.next
        prev_node.next = new_node

    # Duplicate code - The same logic is repeated in the insert_after_duplicate function
    def insert_after_duplicate(self, prev_node, data):
        if not prev_node:
            print("Previous node is not in the list.")
            return

        new_node = Node(data)
        new_node.next = prev_node.next
        prev_node.next = new_node

    # Dead code - This code is not executed
    if False:
        print("This code is dead.")

    # Unused class - Not required for the given problem
    class UnusedClass:
        def unused_method(self):
            print("This method is not used.")

    # Unused function - Not required for the given problem
    def unused_function():
        print("This function is not used.")

def main():
    linked_list = LinkedList()

    # Appending nodes to the linked list
    linked_list.append(1)
    linked_list.append(2)
    linked_list.append(3)

    # Inserting a node after a specific node
    second_node = linked_list.head.next
    linked_list.insert_after(second_node, 4)

    # Inserting a node after a specific node using duplicate function
    third_node = second_node.next
    linked_list.insert_after_duplicate(third_node, 5)

    # Printing the linked list
    current = linked_list.head
    while current:
        print(current.data, end=" ")
        current = current.next
    print()

if __name__ == "__main__":
    main()
