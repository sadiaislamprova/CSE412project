import heapq
from collections import defaultdict

# Duplicate code - The same logic is repeated in the shortest_path_dijkstra_duplicate function
def shortest_path_dijkstra(graph, start):
    distances = {vertex: float('infinity') for vertex in graph}
    distances[start] = 0
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_vertex = heapq.heappop(priority_queue)

        if current_distance > distances[current_vertex]:
            continue

        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances

def shortest_path_dijkstra_duplicate(graph, start):
    distances = {vertex: float('infinity') for vertex in graph}
    distances[start] = 0
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_vertex = heapq.heappop(priority_queue)

        if current_distance > distances[current_vertex]:
            continue

        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances

# Dead code - This code is not executed
if False:
    print("This code is dead.")

# Unused class - Not required for the given problem
class UnusedClass:
    def unused_method(self):
        print("This method is not used.")

# Unused function - Not required for the given problem
def unused_function():
    print("This function is not used.")

def main():
    # Example of a weighted graph
    weighted_graph = {
        'A': {'B': 1, 'C': 4},
        'B': {'A': 1, 'C': 2, 'D': 5},
        'C': {'A': 4, 'B': 2, 'D': 1},
        'D': {'B': 5, 'C': 1}
    }

    start_vertex = 'A'

    result = shortest_path_dijkstra(weighted_graph, start_vertex)
    print(f"Shortest paths from {start_vertex}: {result}")

    # Example of a weighted graph with duplicate code
    weighted_graph_duplicate = {
        'X': {'Y': 3, 'Z': 2},
        'Y': {'X': 3, 'Z': 1},
        'Z': {'X': 2, 'Y': 1}
    }

    start_vertex_duplicate = 'X'

    result_duplicate = shortest_path_dijkstra_duplicate(weighted_graph_duplicate, start_vertex_duplicate)
    print(f"Shortest paths from {start_vertex_duplicate} (duplicate): {result_duplicate}")

if __name__ == "__main__":
    main()
