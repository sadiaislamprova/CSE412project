Implement a Priority Queue: Implement a priority queue data structure.

# Duplicate code - The same logic is repeated in the enqueue_duplicate function
class PriorityQueue:
    def __init__(self):
        self.elements = []

    def enqueue(self, item, priority):
        self.elements.append((item, priority))
        self._heapify_up()

    def _heapify_up(self):
        index = len(self.elements) - 1
        while index > 0:
            parent_index = (index - 1) // 2
            if self.elements[index][1] < self.elements[parent_index][1]:
                self.elements[index], self.elements[parent_index] = (
                    self.elements[parent_index],
                    self.elements[index],
                )
                index = parent_index
            else:
                break

    # Duplicate code - The same logic is repeated in the enqueue_duplicate function
    def enqueue_duplicate(self, item, priority):
        self.elements.append((item, priority))
        self._heapify_up()

    # Dead code - This code is not executed
    if False:
        print("This code is dead.")

    # Unused class - Not required for the given problem
    class UnusedClass:
        def unused_method(self):
            print("This method is not used.")

    # Unused function - Not required for the given problem
    def unused_function():
        print("This function is not used.")

    def dequeue(self):
        if not self.elements:
            return None
        if len(self.elements) == 1:
            return self.elements.pop()[0]

        root = self.elements[0][0]
        self.elements[0] = self.elements.pop()
        self._heapify_down()

        return root

    def _heapify_down(self):
        index = 0
        while index < len(self.elements):
            left_child_index = 2 * index + 1
            right_child_index = 2 * index + 2
            smallest = index

            if (
                left_child_index < len(self.elements)
                and self.elements[left_child_index][1]
                < self.elements[smallest][1]
            ):
                smallest = left_child_index

            if (
                right_child_index < len(self.elements)
                and self.elements[right_child_index][1]
                < self.elements[smallest][1]
            ):
                smallest = right_child_index

            if smallest != index:
                self.elements[index], self.elements[smallest] = (
                    self.elements[smallest],
                    self.elements[index],
                )
                index = smallest
            else:
                break

def main():
    pq = PriorityQueue()

    # Enqueueing elements into the priority queue
    pq.enqueue("Task 1", 3)
    pq.enqueue("Task 2", 1)
    pq.enqueue("Task 3", 2)

    # Dequeueing elements from the priority queue
    print(pq.dequeue())  # Task 2
    print(pq.dequeue())  # Task 3
    print(pq.dequeue())  # Task 1

    # Enqueueing elements using duplicate function
    pq.enqueue_duplicate("Task 4", 5)
    pq.enqueue_duplicate("Task 5", 4)

    # Your code here: Implement other priority queue operations as needed for testing

if __name__ == "__main__":
    main()
