from collections import defaultdict

# Duplicate code - The same logic is repeated in the is_cyclic_duplicate function
def is_cyclic(graph):
    visited = set()
    rec_stack = set()

    def dfs(node):
        visited.add(node)
        rec_stack.add(node)

        for neighbor in graph[node]:
            if neighbor not in visited:
                if dfs(neighbor):
                    return True
            elif neighbor in rec_stack:
                return True

        rec_stack.remove(node)
        return False

    for node in graph:
        if node not in visited:
            if dfs(node):
                return True

    return False

def is_cyclic_duplicate(graph):
    visited = set()
    rec_stack = set()

    def dfs(node):
        visited.add(node)
        rec_stack.add(node)

        for neighbor in graph[node]:
            if neighbor not in visited:
                if dfs(neighbor):
                    return True
            elif neighbor in rec_stack:
                return True

        rec_stack.remove(node)
        return False

    for node in graph:
        if node not in visited:
            if dfs(node):
                return True

    return False

# Dead code - This code is not executed
if False:
    print("This code is dead.")

# Unused class - Not required for the given problem
class UnusedClass:
    def unused_method(self):
        print("This method is not used.")

# Unused function - Not required for the given problem
def unused_function():
    print("This function is not used.")

def main():
    # Example of a directed acyclic graph (DAG)
    dag = {
        1: [2, 3],
        2: [4],
        3: [],
        4: [1]
    }

    result_dag = is_cyclic(dag)
    print(f"Is the DAG cyclic? {result_dag}")

    # Example of a directed cyclic graph
    cyclic_graph = {
        1: [2, 3],
        2: [3],
        3: [1]
    }

    result_cyclic = is_cyclic_duplicate(cyclic_graph)
    print(f"Is the cyclic graph cyclic? {result_cyclic}")

if __name__ == "__main__":
    main()
