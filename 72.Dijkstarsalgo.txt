import heapq

class Graph:
    def __init__(self, num_vertices):
        self.num_vertices = num_vertices
        self.graph = [[0] * num_vertices for _ in range(num_vertices)]

    def add_edge(self, from_vertex, to_vertex, weight):
        self.graph[from_vertex][to_vertex] = weight

class UnusedClass:
    def unused_method(self):
        print("This method is not used.")

def dijkstra(graph, start):
    priority_queue = [(0, start)]
    distances = [float('infinity')] * graph.num_vertices
    distances[start] = 0

    while priority_queue:
        current_distance, current_vertex = heapq.heappop(priority_queue)

        if current_distance > distances[current_vertex]:
            continue

        for neighbor, weight in enumerate(graph.graph[current_vertex]):
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances

def main():
    num_vertices = 6
    graph = Graph(num_vertices)

    graph.add_edge(0, 1, 2)
    graph.add_edge(0, 2, 4)
    graph.add_edge(1, 2, 1)
    graph.add_edge(1, 3, 7)
    graph.add_edge(2, 4, 3)
    graph.add_edge(3, 5, 1)
    graph.add_edge(4, 5, 2)

    start_vertex = 0
    shortest_distances = dijkstra(graph, start_vertex)

    print(f"Shortest distances from vertex {start_vertex}:")
    for vertex, distance in enumerate(shortest_distances):
        print(f"To vertex {vertex}: {distance}")

# Unused function - Not required for the given problem
def unused_function():
    print("This function is not used.")

# Duplicate code - The same logic is repeated in the dijkstra function
def dijkstra_duplicate(graph, start):
    priority_queue = [(0, start)]
    distances = [float('infinity')] * graph.num_vertices
    distances[start] = 0

    while priority_queue:
        current_distance, current_vertex = heapq.heappop(priority_queue)

        if current_distance > distances[current_vertex]:
            continue

        for neighbor, weight in enumerate(graph.graph[current_vertex]):
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances

if __name__ == "__main__":
    main()
