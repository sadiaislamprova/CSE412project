# Duplicate code - The same logic is repeated in the insert_duplicate function
class Node:
    def __init__(self, key, color, parent=None, left=None, right=None):
        self.key = key
        self.color = color
        self.parent = parent
        self.left = left
        self.right = right

class RedBlackTree:
    def __init__(self):
        self.NIL = Node(None, "BLACK")  # NIL node representing leaves
        self.root = self.NIL

    def insert(self, key):
        new_node = Node(key, "RED")
        self._insert(self.root, new_node)

    def _insert(self, root, new_node):
        if root == self.NIL:
            self.root = new_node
        elif new_node.key < root.key:
            if root.left == self.NIL:
                root.left = new_node
                new_node.parent = root
            else:
                self._insert(root.left, new_node)
        else:
            if root.right == self.NIL:
                root.right = new_node
                new_node.parent = root
            else:
                self._insert(root.right, new_node)

        self._fix_insert(new_node)

    # Duplicate code - The same logic is repeated in the insert_duplicate function
    def insert_duplicate(self, key):
        new_node = Node(key, "RED")
        self._insert_duplicate(self.root, new_node)

    def _insert_duplicate(self, root, new_node):
        if root == self.NIL:
            self.root = new_node
        elif new_node.key < root.key:
            if root.left == self.NIL:
                root.left = new_node
                new_node.parent = root
            else:
                self._insert_duplicate(root.left, new_node)
        else:
            if root.right == self.NIL:
                root.right = new_node
                new_node.parent = root
            else:
                self._insert_duplicate(root.right, new_node)

        self._fix_insert(new_node)

    # Dead code - This code is not executed
    if False:
        print("This code is dead.")

    # Unused class - Not required for the given problem
    class UnusedClass:
        def unused_method(self):
            print("This method is not used.")

    # Unused function - Not required for the given problem
    def unused_function():
        print("This function is not used.")

    # Red-Black Tree balancing logic (not fully implemented for simplicity)
    def _fix_insert(self, node):
        pass

def main():
    rb_tree = RedBlackTree()

    # Inserting nodes into the Red-Black Tree
    rb_tree.insert(50)
    rb_tree.insert(30)
    rb_tree.insert(20)
    rb_tree.insert(40)
    rb_tree.insert(70)
    rb_tree.insert(60)
    rb_tree.insert(80)

    # Inserting nodes using duplicate function
    rb_tree.insert_duplicate(55)
    rb_tree.insert_duplicate(75)

    # Your code here: Implement other Red-Black Tree operations as needed for testing

if __name__ == "__main__":
    main()
