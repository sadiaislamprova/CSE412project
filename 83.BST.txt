# Duplicate code - The same logic is repeated in the insert_duplicate function
class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

class BinarySearchTree:
    def __init__(self):
        self.root = None

    def insert(self, key):
        self.root = self._insert(self.root, key)

    def _insert(self, root, key):
        if not root:
            return Node(key)

        if key < root.key:
            root.left = self._insert(root.left, key)
        elif key > root.key:
            root.right = self._insert(root.right, key)

        return root

    # Duplicate code - The same logic is repeated in the insert_duplicate function
    def insert_duplicate(self, key):
        self.root = self._insert_duplicate(self.root, key)

    def _insert_duplicate(self, root, key):
        if not root:
            return Node(key)

        if key < root.key:
            root.left = self._insert_duplicate(root.left, key)
        elif key > root.key:
            root.right = self._insert_duplicate(root.right, key)

        return root

    # Dead code - This code is not executed
    if False:
        print("This code is dead.")

    # Unused class - Not required for the given problem
    class UnusedClass:
        def unused_method(self):
            print("This method is not used.")

    # Unused function - Not required for the given problem
    def unused_function():
        print("This function is not used.")

def main():
    bst = BinarySearchTree()

    # Inserting nodes into the BST
    bst.insert(50)
    bst.insert(30)
    bst.insert(20)
    bst.insert(40)
    bst.insert(70)
    bst.insert(60)
    bst.insert(80)

    # Inserting nodes using duplicate function
    bst.insert_duplicate(55)
    bst.insert_duplicate(75)

    # Your code here: Implement other BST operations as needed for testing

if __name__ == "__main__":
    main()
